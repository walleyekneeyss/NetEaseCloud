{"ast":null,"code":"import * as actionTypes from './constants';\nimport { getSongDetail, getLyric, getSimiPlaylist, getSimiSong } from '@/services/player';\nimport { parseLyric } from '@/utils/lrc-parse';\n\nconst changeCurrentSongAction = song => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  song\n});\n\nconst changeCurrentSongIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nconst changePlayListAction = playList => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList: playList\n});\n\nconst changeLyricsAction = lyrics => ({\n  type: actionTypes.CHANGE_LYRICS,\n  lyrics\n});\n\nconst changeSimiPlaylistAction = res => ({\n  type: actionTypes.CHANGE_SIMI_PLAYLIST,\n  simiPlaylist: res.playlists\n});\n\nconst changeSimiSongsAction = res => ({\n  type: actionTypes.CHANGE_SIMI_SONGS,\n  simiSongs: res.songs\n});\n\nexport const changeCurrentLyricIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  index\n});\nexport const changePlaySequenceAction = currentSequence => {\n  if (currentSequence === 3) currentSequence = 0;\n  return {\n    type: actionTypes.CHANGE_PLAY_SEQUENCE,\n    sequence: currentSequence\n  };\n};\nexport const changePlaySongAction = tag => {\n  return (dispatch, getState) => {\n    // 1.获取当前的index\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n    const playSequence = getState().getIn([\"player\", \"playSequence\"]);\n    const playList = getState().getIn([\"player\", \"playList\"]); // 2.判断当前播放列表\n\n    switch (playSequence) {\n      case 1:\n        currentSongIndex = Math.floor(Math.random() * playList.length);\n        break;\n\n      default:\n        currentSongIndex += tag;\n        if (currentSongIndex === playList.length) currentSongIndex = 0;\n        if (currentSongIndex === -1) currentSongIndex = playList.length - 1;\n    } // 3.处理修改数据\n\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n    dispatch(changeCurrentSongAction(currentSong)); // 获取当前的歌词,并且解析\n\n    getLyric(currentSong.id).then(res => {\n      const lrcString = res.lrc.lyric;\n      const lyrics = parseLyric(lrcString);\n      dispatch(changeLyricsAction(lyrics));\n    });\n  };\n};\nexport const getSongDetailAction = ids => {\n  return (dispatch, getState) => {\n    // 1.判断是否歌曲存在playList中\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(song => song.id === ids);\n\n    if (songIndex !== -1) {\n      // 找到数据\n      const currentSong = playList[songIndex];\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      dispatch(changeCurrentSongAction(currentSong));\n    } else {\n      // 未找到数据\n      getSongDetail(ids).then(res => {\n        const song = res.songs && res.songs[0];\n        if (!song) return; // 1.添加到playList中\n\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n        dispatch(changePlayListAction(newPlayList)); // 2.改变当前index\n\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n      });\n    } // 获取当前的歌词,并且解析\n\n\n    getLyric(ids).then(res => {\n      const lrcString = res.lrc.lyric;\n      const lyrics = parseLyric(lrcString);\n      dispatch(changeLyricsAction(lyrics));\n    });\n  };\n};\nexport const getSimiPlaylistAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n    getSimiPlaylist(id).then(res => {\n      dispatch(changeSimiPlaylistAction(res));\n    });\n  };\n};\nexport const getSimiSongAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n    getSimiSong(id).then(res => {\n      dispatch(changeSimiSongsAction(res));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/bytedance/Desktop/格式化/hy-react-web-music-master/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","getLyric","getSimiPlaylist","getSimiSong","parseLyric","changeCurrentSongAction","song","type","CHANGE_CURRENT_SONG","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changePlayListAction","playList","CHANGE_PLAY_LIST","changeLyricsAction","lyrics","CHANGE_LYRICS","changeSimiPlaylistAction","res","CHANGE_SIMI_PLAYLIST","simiPlaylist","playlists","changeSimiSongsAction","CHANGE_SIMI_SONGS","simiSongs","songs","changeCurrentLyricIndexAction","CHANGE_CURRENT_LYRIC_INDEX","changePlaySequenceAction","currentSequence","CHANGE_PLAY_SEQUENCE","sequence","changePlaySongAction","tag","dispatch","getState","currentSongIndex","getIn","playSequence","Math","floor","random","length","currentSong","id","then","lrcString","lrc","lyric","getSongDetailAction","ids","songIndex","findIndex","newPlayList","push","getSimiPlaylistAction","getSimiSongAction"],"mappings":"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","sourcesContent":["import * as actionTypes from './constants';\n\nimport { getSongDetail, getLyric, getSimiPlaylist, getSimiSong } from '@/services/player';\nimport { parseLyric } from '@/utils/lrc-parse';\n\nconst changeCurrentSongAction = (song) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  song\n});\n\nconst changeCurrentSongIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nconst changePlayListAction = (playList) => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList: playList\n})\n\nconst changeLyricsAction = (lyrics) => ({\n  type: actionTypes.CHANGE_LYRICS,\n  lyrics\n})\n\nconst changeSimiPlaylistAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_PLAYLIST,\n  simiPlaylist: res.playlists\n})\n\nconst changeSimiSongsAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_SONGS,\n  simiSongs: res.songs\n})\n\nexport const changeCurrentLyricIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  index\n})\n\nexport const changePlaySequenceAction = (currentSequence) => {\n  if (currentSequence === 3) currentSequence = 0;\n  return {\n    type: actionTypes.CHANGE_PLAY_SEQUENCE,\n    sequence: currentSequence\n  }\n}\n\nexport const changePlaySongAction = (tag) => {\n  return (dispatch, getState) => {\n    // 1.获取当前的index\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n    const playSequence = getState().getIn([\"player\", \"playSequence\"]);\n    const playList = getState().getIn([\"player\", \"playList\"]);\n\n    // 2.判断当前播放列表\n    switch (playSequence) {\n      case 1:\n        currentSongIndex = Math.floor(Math.random() * playList.length);\n        break;\n      default:\n        currentSongIndex += tag;\n        if (currentSongIndex === playList.length) currentSongIndex = 0; \n        if (currentSongIndex === -1) currentSongIndex = playList.length - 1;\n    }\n\n    // 3.处理修改数据\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n    dispatch(changeCurrentSongAction(currentSong));\n\n    // 获取当前的歌词,并且解析\n    getLyric(currentSong.id).then(res => {\n      const lrcString = res.lrc.lyric;\n      const lyrics = parseLyric(lrcString);\n      dispatch(changeLyricsAction(lyrics));\n    });\n  }\n}\n\nexport const getSongDetailAction = (ids) => {\n  return (dispatch, getState) => {\n    // 1.判断是否歌曲存在playList中\n    const playList = getState().getIn([\"player\", \"playList\"]);\n\n    const songIndex = playList.findIndex(song => song.id === ids);\n    if (songIndex !== -1) { // 找到数据\n      const currentSong = playList[songIndex];\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      dispatch(changeCurrentSongAction(currentSong));\n    } else { // 未找到数据\n      getSongDetail(ids).then(res => {\n        const song = res.songs && res.songs[0];\n        if (!song) return;\n        // 1.添加到playList中\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n        dispatch(changePlayListAction(newPlayList));\n        // 2.改变当前index\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n      });\n    }\n\n    // 获取当前的歌词,并且解析\n    getLyric(ids).then(res => {\n      const lrcString = res.lrc.lyric;\n      const lyrics = parseLyric(lrcString);\n      dispatch(changeLyricsAction(lyrics));\n    });\n  }\n}\n\nexport const getSimiPlaylistAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiPlaylist(id).then(res => {\n      dispatch(changeSimiPlaylistAction(res));\n    })\n  }\n}\n\nexport const getSimiSongAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiSong(id).then(res => {\n      dispatch(changeSimiSongsAction(res));\n    })\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}