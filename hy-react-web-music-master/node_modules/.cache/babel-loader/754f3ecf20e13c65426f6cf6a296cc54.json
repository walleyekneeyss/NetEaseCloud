{"ast":null,"code":"import originAxios from 'axios';\nexport default function request(option) {\n  return new Promise((resolve, reject) => {\n    // 1.创建axios的实例\n    const instance = originAxios.create({\n      baseURL: 'http://123.207.32.32:9002/',\n      timeout: 10000\n    }); // 配置请求和响应拦截\n\n    instance.interceptors.request.use(config => {\n      // console.log('来到了request拦截success中');\n      // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n      // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n      // 3.对请求的参数进行序列化(看服务器是否需要序列化)\n      // config.data = qs.stringify(config.data)\n      // console.log(config);\n      // 4.等等\n      return config;\n    }, err => {\n      // console.log('来到了request拦截failure中');\n      return err;\n    });\n    instance.interceptors.response.use(response => {\n      // console.log('来到了response拦截success中');\n      return response.data;\n    }, err => {\n      console.log('来到了response拦截failure中');\n      console.log(err);\n\n      if (err && err.response) {\n        switch (err.response.status) {\n          case 400:\n            err.message = '请求错误';\n            break;\n\n          case 401:\n            err.message = '未授权的访问';\n            break;\n\n          default:\n            err.message = \"其他错误信息\";\n        }\n      }\n\n      return err;\n    }); // 2.传入对象进行网络请求\n\n    instance(option).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/格式化/hy-react-web-music-master/src/services/axios.js"],"names":["originAxios","request","option","Promise","resolve","reject","instance","create","baseURL","timeout","interceptors","use","config","err","response","data","console","log","status","message","then","res","catch"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,OAAxB;AAEA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC;AACA,UAAMC,QAAQ,GAAGN,WAAW,CAACO,MAAZ,CAAmB;AACnCC,MAAAA,OAAO,EAAE,4BAD0B;AAEnCC,MAAAA,OAAO,EAAE;AAF0B,KAAnB,CAAjB,CAFuC,CAOvC;;AACAH,IAAAA,QAAQ,CAACI,YAAT,CAAsBT,OAAtB,CAA8BU,GAA9B,CAAkCC,MAAM,IAAI;AAC3C;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA,aAAOA,MAAP;AACA,KAZD,EAYGC,GAAG,IAAI;AACT;AACA,aAAOA,GAAP;AACA,KAfD;AAiBAP,IAAAA,QAAQ,CAACI,YAAT,CAAsBI,QAAtB,CAA+BH,GAA/B,CAAmCG,QAAQ,IAAI;AAC9C;AACA,aAAOA,QAAQ,CAACC,IAAhB;AACA,KAHD,EAGGF,GAAG,IAAI;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACGD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;;AACA,UAAIA,GAAG,IAAIA,GAAG,CAACC,QAAf,EAAyB;AAC3B,gBAAQD,GAAG,CAACC,QAAJ,CAAaI,MAArB;AACC,eAAK,GAAL;AACCL,YAAAA,GAAG,CAACM,OAAJ,GAAc,MAAd;AACA;;AACD,eAAK,GAAL;AACCN,YAAAA,GAAG,CAACM,OAAJ,GAAc,QAAd;AACA;;AACD;AACCN,YAAAA,GAAG,CAACM,OAAJ,GAAc,QAAd;AARF;AAUA;;AACD,aAAON,GAAP;AACA,KAnBD,EAzBuC,CA8CvC;;AACAP,IAAAA,QAAQ,CAACJ,MAAD,CAAR,CAAiBkB,IAAjB,CAAsBC,GAAG,IAAI;AAC5BjB,MAAAA,OAAO,CAACiB,GAAD,CAAP;AACA,KAFD,EAEGC,KAFH,CAEST,GAAG,IAAI;AACfR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACA,KAJD;AAKA,GApDM,CAAP;AAqDA","sourcesContent":["import originAxios from 'axios';\n\nexport default function request(option) {\n\treturn new Promise((resolve, reject) => {\n\t\t// 1.创建axios的实例\n\t\tconst instance = originAxios.create({\n\t\t\tbaseURL: 'http://123.207.32.32:9002/',\n\t\t\ttimeout: 10000\n\t\t});\n\n\t\t// 配置请求和响应拦截\n\t\tinstance.interceptors.request.use(config => {\n\t\t\t// console.log('来到了request拦截success中');\n\t\t\t// 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n\n\t\t\t// 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n\n\t\t\t// 3.对请求的参数进行序列化(看服务器是否需要序列化)\n\t\t\t// config.data = qs.stringify(config.data)\n\t\t\t// console.log(config);\n\n\t\t\t// 4.等等\n\t\t\treturn config\n\t\t}, err => {\n\t\t\t// console.log('来到了request拦截failure中');\n\t\t\treturn err\n\t\t})\n\n\t\tinstance.interceptors.response.use(response => {\n\t\t\t// console.log('来到了response拦截success中');\n\t\t\treturn response.data\n\t\t}, err => {\n\t\t\tconsole.log('来到了response拦截failure中');\n      console.log(err);\n      if (err && err.response) {\n\t\t\t\tswitch (err.response.status) {\n\t\t\t\t\tcase 400:\n\t\t\t\t\t\terr.message = '请求错误'\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 401:\n\t\t\t\t\t\terr.message = '未授权的访问'\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\terr.message = \"其他错误信息\"\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn err\n\t\t})\n\n\t\t// 2.传入对象进行网络请求\n\t\tinstance(option).then(res => {\n\t\t\tresolve(res)\n\t\t}).catch(err => {\n\t\t\treject(err)\n\t\t})\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}