{"ast":null,"code":"var _jsxFileName = \"/Users/bytedance/Desktop/\\u683C\\u5F0F\\u5316/hy-react-web-music-master/src/pages/player/app-play-panel/c-cpns/lyric-panel/index.js\";\nimport React, { memo, useRef, useEffect } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport classNames from 'classnames';\nimport { scrollTo } from \"@/utils/ui-helper\";\nimport { PannelWrapper } from './style';\nexport default memo(function HYLyricPanel() {\n  const {\n    currentLyrics,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual); // other hooks\n\n  const panelRef = useRef();\n  useEffect(() => {\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return;\n    scrollTo(panelRef.current, (currentLyricIndex - 3) * 32, 300);\n  }, [currentLyricIndex]);\n  return /*#__PURE__*/React.createElement(PannelWrapper, {\n    ref: panelRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lrc-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, currentLyrics.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item.time,\n      className: classNames(\"lrc-item\", {\n        \"active\": index === currentLyricIndex\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }\n    }, item.content);\n  })));\n});","map":{"version":3,"sources":["/Users/bytedance/Desktop/格式化/hy-react-web-music-master/src/pages/player/app-play-panel/c-cpns/lyric-panel/index.js"],"names":["React","memo","useRef","useEffect","useSelector","shallowEqual","classNames","scrollTo","PannelWrapper","HYLyricPanel","currentLyrics","currentLyricIndex","state","getIn","panelRef","current","map","item","index","time","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,SAASC,aAAT,QAA8B,SAA9B;AAEA,eAAeP,IAAI,CAAC,SAASQ,YAAT,GAAwB;AAC1C,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAuCP,WAAW,CAACQ,KAAK,KAAK;AACjEF,IAAAA,aAAa,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,eAAX,CAAZ,CADkD;AAEjEF,IAAAA,iBAAiB,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,mBAAX,CAAZ;AAF8C,GAAL,CAAN,EAGpDR,YAHoD,CAAxD,CAD0C,CAM1C;;AACA,QAAMS,QAAQ,GAAGZ,MAAM,EAAvB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,iBAAiB,GAAG,CAApB,IAAyBA,iBAAiB,GAAG,CAAjD,EAAoD;AACpDJ,IAAAA,QAAQ,CAACO,QAAQ,CAACC,OAAV,EAAmB,CAACJ,iBAAiB,GAAG,CAArB,IAA0B,EAA7C,EAAiD,GAAjD,CAAR;AACD,GAHQ,EAGN,CAACA,iBAAD,CAHM,CAAT;AAKA,sBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIJ,aAAa,CAACM,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,wBACE;AAAK,MAAA,GAAG,EAAED,IAAI,CAACE,IAAf;AACE,MAAA,SAAS,EAAEb,UAAU,CAAC,UAAD,EAAa;AAAE,kBAAUY,KAAK,KAAKP;AAAtB,OAAb,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGM,IAAI,CAACG,OAFR,CADF;AAMD,GAPD,CAFJ,CADF,CADF;AAgBD,CA7BkB,CAAnB","sourcesContent":["import React, { memo, useRef, useEffect } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { scrollTo } from \"@/utils/ui-helper\";\n\nimport { PannelWrapper } from './style';\n\nexport default memo(function HYLyricPanel() {\n  const { currentLyrics, currentLyricIndex } = useSelector(state => ({\n    currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual);\n\n  // other hooks\n  const panelRef = useRef();\n  useEffect(() => {\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return;\n    scrollTo(panelRef.current, (currentLyricIndex - 3) * 32, 300)\n  }, [currentLyricIndex]);\n\n  return (\n    <PannelWrapper ref={panelRef}>\n      <div className=\"lrc-content\">\n        {\n          currentLyrics.map((item, index) => {\n            return (\n              <div key={item.time}\n                className={classNames(\"lrc-item\", { \"active\": index === currentLyricIndex })}>\n                {item.content}\n              </div>\n            )\n          })\n        }\n      </div>\n    </PannelWrapper>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}